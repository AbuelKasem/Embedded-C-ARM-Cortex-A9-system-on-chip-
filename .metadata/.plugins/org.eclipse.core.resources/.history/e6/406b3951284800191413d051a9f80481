/*
 * m.c
 *
 *  Created on: Mar 16, 2019
 *      Author: Kasem
 */


#include "DE1SoC_LT24/DE1SoC_LT24.h"
#include "HPS_Watchdog/HPS_Watchdog.h"
#include "HPS_usleep/HPS_usleep.h"

//Include our image
#include "Test.h"

//Debugging Function (same as last lab)
#include <stdlib.h>


Graphics_drawLine(unsigned int x1,unsigned int y1,unsigned int x2,unsigned int y2,unsigned short colour);
void exitOnFail(signed int status, signed int successStatus){
    if (status != successStatus) {
        exit((int)status); //Add breakpoint here to catch failure
    }
}

//
// Main Function
// =============
int main(void) {
	//int i=0;
    //Initialise the LCD Display.
	 unsigned short colours[6] = {LT24_RED,LT24_YELLOW,LT24_GREEN,LT24_CYAN,LT24_BLUE,LT24_MAGENTA};
	 unsigned int colourIdx = 0;
	 unsigned int x1=50,y1=50,x2=75,y2=150,x3=100,y3=50;
    exitOnFail(
            LT24_initialise(0xFF200060,0xFF200080), //Initialise LCD
            LT24_SUCCESS);                          //Exit if not successful
    HPS_ResetWatchdog();
    //Display the image. Setting the co-ordinates and size of the image.

   // LT24_setWindow( xleft,  ytop,  width,  height);
    //LT24_window_background(xleft,  ytop,  width,  height);
    LT24_clearDisplay(LT24_YELLOW);
    //LT24_window_background(LT24_BLUE,xleft,  ytop,  width,  height);




    while (1) {





    		//	Graphics_drawLine(x1,y1,x2,y2, LT24_RED);

    	    //	Graphics_drawLine(x2,y2,x3,y3, LT24_BLUE);

    	    //	Graphics_drawLine(x3,y3,x1,y1, LT24_GREEN);

    	    	//Graphics_drawLine(70,25,70,100, LT24_BLUE);

    	    	//Graphics_drawLine(40,160,150,60, LT24_RED);


    	//Graphics_drawLine(120,160,20,160, LT24_RED);

    //	Graphics_drawLine(191,89,120,160, LT24_BLUE);

    //	Graphics_drawLine(50,25,200,100, LT24_GREEN);

    //	Graphics_drawLine(70,25,70,100, LT24_BLUE);

    	Graphics_drawLine(40,160,150,60, LT24_RED);

        HPS_ResetWatchdog(); //Just reset the watchdog.
    }
}




Graphics_drawLine(unsigned int x1,unsigned int y1,unsigned int x2,unsigned int y2,unsigned short colour){
	int dy=0;  //difference in y axis
	int dx=0;   //difference in x axis
	int f=0; //flag for when x1=x2 ,used to control the drawing loop
	float s=0; //slope of the line
	float  c=0;   //intercept
    int temp=0;
    float err=0;
	int x_step=0,y_step=0;   // the increment/decrement step
	int i=0,j=0;               // iterators i for x ,j for y
	dy=y2-y1;
	dx=x2-x1;

	if(y2>y1){    // to decide the direction of movement
	y_step=1;  // if end larger than start , step is positive ,to increment by a single pixel


	}
	else if(y2<y1){
		y_step=-1;  // if end less than start , step is negative ,to decrement by a single pixel
	}


	if(x2>x1) {  // same as y ,to determine the step

		x_step=1;
	}
	else if(x2<x1){

			x_step=-1;
	}


                                         //y=s*x+c   the straight line equation ,
	                                    //y1=s*x1+c  , c=y1-s*x1  , calculating the intercept
	if(x1!=x2) s=(float)dy/(float)dx;
	err=s-1;
	c=y1-(s*x1);                            // calculating the intercept
	                                        // init. the y iterator to first point's y coordinate ,y1
	if(x1==x2) f=1;                              //when the line to be drawn is vertical , set a flag to 1
	else f=0;                                  // else if the line is not vertical , clear the flag

	j=y1;
if(dx>=dy)
{
	for(i=x1;(i!=x2|| f);i=i+x_step){   //i >>>x  ,j>>> y

		if(y1==y2) j=y2;

		if(x1==x2) {
			i=x2;
			j=j+y_step;
		}

		 LT24_drawPixel(colour,i,j);

		 if(err>0) {
			 j=j+y_step;

		    err=err-1;
		 }
		 err=err+s;


					      //usleep(1000);

					     // usleep(1000);
	if(j==y2) f=0;
	}
}



else {
	for(j=y1;(j!=y2|| f);j=j+y_step){   //i >>>x  ,j>>> y




	}
}
	}
