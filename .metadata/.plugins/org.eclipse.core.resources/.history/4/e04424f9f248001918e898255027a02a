/*
 * DE1-SoC LT24 Example
 *
 * Displays a test pattern on the LT24
 * LCD using the LT24 bare metal driver.
 *
 *  Created on: 09 Feb 2018
 */

#include "DE1SoC_LT24/DE1SoC_LT24.h"
#include "HPS_Watchdog/HPS_Watchdog.h"
#include "HPS_usleep/HPS_usleep.h"

//Include our image


//Debugging Function (same as last lab)
#include <stdlib.h>
#include <math.h>
#include <stdbool.h>

void Graphics_drawLine(unsigned int x1,unsigned int y1,unsigned int x2,unsigned int y2,unsigned short colour);
void Graphics_drawTriangle(unsigned int x1,unsigned int y1,unsigned int x2,unsigned int y2,unsigned int x3,unsigned int y3,unsigned short colour,bool noFill,unsigned short fillColour);
void Graphics_drawBox(unsigned int x1,unsigned int y1,unsigned int x2,unsigned int y2,unsigned short colour,bool noFill,unsigned short fillColour);
void Graphics_drawCircle2(unsigned int x,unsigned int y,unsigned int r);
void Graphics_drawCircle(unsigned int xc,unsigned int yc,unsigned int r,unsigned short colour,bool nofill,unsigned short fillColour);
void eight_octant_draw(unsigned short colour,int x ,int y,int p,int q);

void exitOnFail(signed int status, signed int successStatus){
    if (status != successStatus) {
        exit((int)status); //Add breakpoint here to catch failure
    }
}

//
// Main Function
// =============
int main(void) {
	//int i=0;
    //Initialise the LCD Display.
	// unsigned short colours[6] = {LT24_RED,LT24_YELLOW,LT24_GREEN,LT24_CYAN,LT24_BLUE,LT24_MAGENTA};
	// unsigned int colourIdx = 0;
	 unsigned int x1=50,y1=5,x2=75,y2=75,x3=100,y3=5;
    exitOnFail(
            LT24_initialise(0xFF200060,0xFF200080), //Initialise LCD
            LT24_SUCCESS);                          //Exit if not successful
    HPS_ResetWatchdog();
    //Display the image. Setting the co-ordinates and size of the image.

   // LT24_setWindow( xleft,  ytop,  width,  height);
    //LT24_window_background(xleft,  ytop,  width,  height);
    LT24_clearDisplay(0);
    //LT24_window_background(LT24_BLUE,xleft,  ytop,  width,  height);




    while (1) {

    	//Graphics_drawCircle(100,100,50);
    	//Graphics_drawCircle(100,230,30,LT24_GREEN,0,LT24_RED);

    	//Graphics_drawLine(x2,y2,x3,y3, LT24_BLUE);   //x2=75,y2=150,x3=100,y3=50;  dx=25 ,dy=-100 ,s=-4
    	//Graphics_drawTriangle(x1,y1,x2,y2,x3,y3,LT24_RED,0,LT24_GREEN);


    Graphics_drawBox(50,50,150,100,LT24_RED,0,LT24_BLUE);
/*

 	    Graphics_drawLine(120,160,20,160, LT24_RED);  //dy=0 ,dx- ,s=0  horizontal

    	Graphics_drawLine(191,89,120,160, LT24_BLUE);  //dx- ,dy+  ,dx<dy


    	Graphics_drawLine(0,0,150,70, LT24_GREEN);        //dx>dy ,s+

    	Graphics_drawLine(50,200,200,100, LT24_BLUE);     //dx>dy   ,s-

    	Graphics_drawLine(200,200,50,50, LT24_GREEN);     //dx=dy   ,s+

    	Graphics_drawLine(70,20,70,120, LT24_RED);     //dx=0 ,,dy+ , dx<dy  ,s=0

    	Graphics_drawLine(20,50,170,50, LT24_BLUE);     //dx+ ,,dy=0 , dx>dy  ,s=0


    	Graphics_drawLine(0,0,100,200, LT24_RED);  //dx=100 ,dy=200 ,s=2  ,dx<dy

    	Graphics_drawLine(20,30,50,70, LT24_GREEN);  //dx=30 ,dy=40 ,s1.3  ,dx<dy

                                                            */
        HPS_ResetWatchdog(); //Just reset the watchdog.
    }
}

void Graphics_drawLine(unsigned int x1,unsigned int y1,unsigned int x2,unsigned int y2,unsigned short colour)
{

	    int dy=0;  //difference in y axis
		int dx=0;   //difference in x axis
		float s=0; //slope of the line
	    float err=0;
		int x_step=0,y_step=0;   // the increment/decrement step
		int i=0,j=0,x=0,y=0,n=0,m=0,step1=0,step2=0;               // iterators i for x ,j for y
		dy=y2-y1;      // delta y
		dx=x2-x1;      // delta x
		if(y2>y1){    // to decide the direction of movement
		y_step=1;  // if end larger than start , step is positive ,to increment by a single pixel
		}
		else if(y2<y1){
			y_step=-1;  // if end less than start , step is negative ,to decrement by a single pixel
		}
		if(x2>x1) {  // same as y ,to determine the step

			x_step=1;
		}
		else if(x2<x1){
		x_step=-1;
		}

	                                         //y=s*x+c   the straight line equation                                   //y1=s*x1+c  , c=y1-s*x1  , calculating the intercept
		if(x1!=x2) s=(float)dy/(float)dx;
		if(s<0) s=s*(-1);
		if(s>1) s=1/s;
		err=s-1;
		if(dx==-dy || dy==-dx) dx=dy;//
		 if(dx <0 )  dx=dx*-1;
		 if(dy<0)     dy=dy*-1;


        if(dx>=dy || dy==0) {
			n=x1;
			m=x2;
			step1=x_step;
			step2=y_step;
			j=y1;
		}
		else if(dx==0 || dx < dy  ) {
			n=y1;
			m=y2;
			step1=y_step;
			step2=x_step;
			j=x1;

		}
		for(i=n;(i!=m);i=i+step1){   //i >>>x  ,j>>> y

			if(y1==y2) {
				y=y2;
				x=i;
			}

			else if(x1==x2) {
				x=x2;
				y=i;
			           }
			else if(dx>=dy){
				x=i;
				y=j;
			}
			else if(dx < dy){
							y=i;
							x=j;
						}

			usleep(500);
			 LT24_drawPixel(colour,x,y);
			 usleep(500);

			 if(err>=0) {
				 j=j+step2;

			    err=err-1;
			            }
			 err=err+s;


		}
	}









void Graphics_drawTriangle(unsigned int x1,unsigned int y1,unsigned int x2,unsigned int y2,unsigned int x3,unsigned int y3,unsigned short colour,bool noFill,unsigned short fillColour)
{


	Graphics_drawLine(x1,y1,x2,y2, colour);

    Graphics_drawLine(x2,y2,x3,y3, colour);

	Graphics_drawLine(x3,y3,x1,y1, colour);

  if(!noFill) while(x1!=x2 && y2!=y1){
	  x1++;
	  y1++;
	  y2--;
	  x3--;
	  y3++;
	  Graphics_drawTriangle(x1,y1,x2,y2,x3,y3,fillColour,1,fillColour);
  }

}


void Graphics_drawBox(unsigned int x1,unsigned int y1,unsigned int x2,unsigned int y2,unsigned short colour,bool noFill,unsigned short fillColour)

{

	// x1,y1  top left corner
	//x2,y2 bottom right corner
	unsigned int x3,y3,x4, y4;
	  x3=x1;
	  y3=y2;
	  x4=x2;
	  y4=y1;

	       Graphics_drawLine(x1,y1,x3,y3, colour);

	       Graphics_drawLine(x3,y3,x2,y2, colour);

	  	   Graphics_drawLine(x2,y2,x4,y4, colour);

	    	Graphics_drawLine(x4,y4,x1,y1, colour);


	 if(!noFill)  do {

		                                     //while(x1!=x2 && y1 != y2
		 x1++;
		 y1++;
		 x2--;
		 y2--;

		 Graphics_drawBox(x1,y1,x2,y2,fillColour,1,fillColour);
		 if(x1==x2 || y1==y2) break;
	 } while(x1!=x2);



x1=0,x2=0,y1=0,y2=0;

}

void Graphics_drawCircle2(unsigned int xc,unsigned int yc,unsigned int r)
{

	double x1,y1;
	double r2=(r)*(r),i=0,j=0,i2;
	unsigned int i_int,j_int;
	x1=xc+r;
	y1=yc;                                //x^2+y^2=r^2;

	LT24_drawPixel(LT24_BLUE,x1,y1);
	//j=y1;
	for(i=x1;i >xc-r ;i--)  {

		i2=(i-xc)*(i-xc);
		j=yc+sqrt(r2-i2);
		i_int= (int)i;
		j_int=(int)j;
		LT24_drawPixel(LT24_BLUE,i_int,j_int);

	}

	for(i=xc-r;i <x1 ;i++)  {

			i2=(i-xc)*(i-xc);
			j=yc-sqrt(r2-i2);
			i_int= (int)i;
			j_int=(int)j;
			LT24_drawPixel(LT24_BLUE,i_int,j_int);

		}



	}


void Graphics_drawCircle(unsigned int xc,unsigned int yc,unsigned int r,unsigned short colour,bool nofill,unsigned short fillColour){

	 int p,q;
	 int x,y,d;
	 p=0;
	 q=r;
	x=xc;
	y=yc;
	d=3-(2*r);
	eight_octant_draw(colour,x,y,p,q);
	while(p<=q) {
		p++;
		if(d<0) {d=d+4*p+6;

		}
		else {
			q=q-1;
			d=d+4*(p-q)+10;
		}
		eight_octant_draw(colour,x,y,p,q);
	}
r=r-1;
if(!nofill) while(r>=2) {
	r--;
	Graphics_drawCircle(xc,yc,r,fillColour,1,fillColour);
	//Graphics_drawCircle2(100,100,30,LT24_GREEN,0,LT24_RED);
}


}


void eight_octant_draw(unsigned short colour,int x ,int y,int p,int q){

	LT24_drawPixel(colour,x+p,y+q);  //1st octant

		LT24_drawPixel(colour,x-p,y+q);

		LT24_drawPixel(colour,x+p,y-q);

		LT24_drawPixel(colour,x-p,y-q);

		LT24_drawPixel(colour,x+q,y+p);

		LT24_drawPixel(colour,x-q,y+p);

		LT24_drawPixel(colour,x+q,y-p);

		LT24_drawPixel(colour,x-q,y-p);




}

