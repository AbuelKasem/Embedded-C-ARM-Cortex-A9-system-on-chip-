/*
 * LCD_GRAPHICS.c



 *
 *  Created on: Mar 17, 2019
 *      Author: Kasem
 */
#include <stdbool.h>
#include "LCD_GRAPHICS.h"
#include <math.h>
#include "../DE1SoC_LT24/DE1SoC_LT24.h"
#include "../HPS_Watchdog/HPS_Watchdog.h"
#include "../HPS_usleep/HPS_usleep.h"


#define  T   150    // animatie time




signed int Graphics_initialise( unsigned int lcd_pio_base, unsigned int lcd_hw_base ){
	signed int init_status_code=0;
	if(!(LT24_isInitialised())) {
		init_status_code=-1;
		init_status_code=LT24_initialise(lcd_pio_base,lcd_hw_base);

	}

	return init_status_code;


}

signed int Graphics_drawLine(unsigned int x1,unsigned int y1,unsigned int x2,unsigned int y2,unsigned short colour)
{
		signed int graphics_status=0;



	    int dy=0;  //difference in y axis
		int dx=0;   //difference in x axis
		float s=0; //slope of the line
	    float err=0;
		int x_step=0,y_step=0;   // the increment/decrement step
		int i=0,j=0,x=0,y=0,n=0,m=0,step1=0,step2=0;               // iterators i for x ,j for y

		if(x1 > LT24_WIDTH_limit || x2 > LT24_WIDTH_limit || y1 > LT24_HEIGHT_limit || y2 > LT24_HEIGHT_limit )
				{ graphics_status=Graphics_INVALIDSIZE; }   // if any of the points is beyond the limit of the lcd , return error of invalid size

				if (graphics_status != Graphics_SUCCESS ) return graphics_status;
		dy=y2-y1;      // delta y
		dx=x2-x1;      // delta x
		if(y2>y1){    // to decide the direction of movement
		y_step=1;  // if end larger than start , step is positive ,to increment by a single pixel
		}
		else if(y2<y1){
			y_step=-1;  // if end less than start , step is negative ,to decrement by a single pixel
		}
		if(x2>x1) {  // same as y ,to determine the step

			x_step=1;
		}
		else if(x2<x1){
		x_step=-1;
		}

	                                         //y=s*x+c   the straight line equation                                   //y1=s*x1+c  , c=y1-s*x1  , calculating the intercept
		if(x1!=x2) s=(float)dy/(float)dx;
		if(s<0) s=s*(-1);
		if(s>1) s=1/s;
		err=s-1;
		if(dx==-dy || dy==-dx) dx=dy;//
		 if(dx <0 )  dx=dx*-1;
		 if(dy<0)     dy=dy*-1;


        if(dx>=dy || dy==0) {
			n=x1;
			m=x2;
			step1=x_step;
			step2=y_step;
			j=y1;
		}
		else if(dx==0 || dx < dy  ) {
			n=y1;
			m=y2;
			step1=y_step;
			step2=x_step;
			j=x1;

		}


		for(i=n;(i!=m);i=i+step1){   //i >>>x  ,j>>> y

			if(y1==y2) {
				y=y2;
				x=i;
			}

			else if(x1==x2) {
				x=x2;
				y=i;
			           }
			else if(dx>=dy){
				x=i;
				y=j;
			}
			else if(dx < dy){   //slope greater than 1 , swap x and y , make y driving axis ,and x driven
							y=i;
							x=j;
						}

			usleep(T);

			graphics_status= LT24_drawPixel(colour,x,y);
			if (graphics_status != Graphics_SUCCESS ) return graphics_status;
		 usleep(T);

			 if(err>=0) {
				 j=j+step2;

			    err=err-1;
			            }
			 err=err+s;


		}
		return Graphics_SUCCESS;
	}


signed int Graphics_drawTriangle(unsigned int x1,unsigned int y1,unsigned int x2,unsigned int y2,unsigned int x3,unsigned int y3,unsigned short colour,bool noFill,unsigned short fillColour)
{
	  signed int graphics_status=0;
	  float invs1 ;
	  float invs2;
	  int x1f=(int)x1,x2f=(int)x2,x3f=(int)x3,y1f=(int)y1,y2f=(int)y2,y3f=(int)y3 ;
	  float curx1 ;
	  float curx2 ;
	  int scanlineY;
	  int dx1,dy1,dx2,dy2;


	graphics_status=Graphics_drawLine(x1,y1,x2,y2, colour);
	if (graphics_status != Graphics_SUCCESS ) return graphics_status;
	graphics_status=Graphics_drawLine(x2,y2,x3,y3, colour);
    if (graphics_status != Graphics_SUCCESS ) return graphics_status;
    graphics_status=Graphics_drawLine(x3,y3,x1,y1, colour);
	if (graphics_status != Graphics_SUCCESS ) return graphics_status;

	if(noFill ) return Graphics_SUCCESS;


	if(!noFill ) {

		if(y2>y1 ) {
			if (y2==y3){
				dx1=x2f -x1f;
				dy1=y2f - y1f;
				dx2=x3f - x1f;
				dy2=y3f - y1f;
		       invs1 =  ( float)dx1 / (float)dy1;

			   invs2 = (float)dx2 / ( float)dy2;
			   curx1 = x1;
			  curx2 = x1;}

			for ( scanlineY = y1; scanlineY <y3; scanlineY++) {
				Graphics_drawLine((int)curx1, scanlineY, (int)curx2, scanlineY,fillColour);
			    curx1 += invs1;
			    curx2 += invs2;
			  }
			}
		else if(y1>y2) {
			if (y2==y3){
							dx1=x1f -x2f;
							dy1=y1f - y2f;
							dx2=x1f - x3f;
							dy2=y1f - y3f;
					       invs1 =  ( float)dx1 / (float)dy1;

						   invs2 = (float)dx2 / ( float)dy2;
						   curx1 = x1;
						  curx2 = x1+1;}
						for ( scanlineY = y1; scanlineY >y2; scanlineY--) {
							Graphics_drawLine((int)curx1, scanlineY, (int)curx2, scanlineY,fillColour);
						    curx1 -= invs1;
						    curx2 -= invs2;
						  }

		}
		else if(y2>y1 ) {
					if (y1==y3){
									dx1=x2f -x1f;
									dy1=y2f - y1f;
									dx2=x2f - x3f;
									dy2=y2f - y3f;
							       invs1 =  ( float)dx1 / (float)dy1;

								   invs2 = (float)dx2 / ( float)dy2;
								   curx1 = x1;
								  curx2 = x1+1;}
								for ( scanlineY = y2; scanlineY >y1; scanlineY--) {
									Graphics_drawLine((int)curx1, scanlineY, (int)curx2, scanlineY,fillColour);
								    curx1 -= invs1;
								    curx2 -= invs2;
								  }

				}




	}
	return Graphics_SUCCESS;

}

signed int Graphics_drawTriangle2(unsigned int x1,unsigned int y1,unsigned int x2,unsigned int y2,unsigned int x3,unsigned int y3,unsigned short colour,bool noFill,unsigned short fillColour)
{
	  signed int graphics_status=0;
	  float invs1 ;
	  float invs2;
	  int x1f=(int)x1,x2f=(int)x2,x3f=(int)x3,y1f=(int)y1,y2f=(int)y2,y3f=(int)y3 ;
	  float curx1 ;
	  float curx2 ;
	  int scanlineY;
	  int dx1,dy1,dx2,dy2,x1b,x2b,x3b,x4b,y1b,y2b,y3b,y4b,n,m;


	graphics_status=Graphics_drawLine(x1,y1,x2,y2, colour);
	if (graphics_status != Graphics_SUCCESS ) return graphics_status;
	graphics_status=Graphics_drawLine(x2,y2,x3,y3, colour);
    if (graphics_status != Graphics_SUCCESS ) return graphics_status;
    graphics_status=Graphics_drawLine(x3,y3,x1,y1, colour);
	if (graphics_status != Graphics_SUCCESS ) return graphics_status;

	if(noFill ) return Graphics_SUCCESS;


	if(!noFill ) {

		x1b=x2;
		y1b=y1;
		x2b=x3;
		y2b=y3;
		x3b=x1b;
	    y3b=y2b;
		x4b=x2b;
		y4b=y1b;

		for(n=x1b;n<=x2b;n++)
		{   for(m=y1b;m<=y2b;m++){
			if(point_Triangle(x1,x2,y1,y2,x3,y3,n,m)) {LT24_drawPixel(fillColour,n,m);

		}
		}

	}
	return Graphics_SUCCESS;

}
}

bool point_Triangle(unsigned int x1,unsigned int y1,unsigned int x2,unsigned int y2,unsigned int x3,unsigned int y3,unsigned int xp,unsigned int yp)
    {
	float a,b,c,d;
	bool out;

	d = ((y2 - y3)*(x1 - x3) + (x3 - x2)*(y1 - y3));
	 a = ((y2 - y3)*(xp - x3) + (x3 - x2)*(yp - y3)) / d;
	 b = ((y3 - y1)*(xp - x3) + (x1 - x3)*(yp - y3)) / d;
	  c = 1 - a - b;
	  out =(0 <= a && a <= 1 )&&( 0 <= b && b <= 1 ) && (0 <= c && c <= 1);
	 return out;
}

signed int Graphics_drawBox(unsigned int x1,unsigned int y1,unsigned int x2,unsigned int y2,unsigned short colour,bool noFill,unsigned short fillColour)

{
	signed int graphics_status=0;
	// x1,y1  top left corner
	//x2,y2 bottom right corner
	unsigned int x3,y3,x4, y4;
	  x3=x1;
	  y3=y2;
	  x4=x2;
	  y4=y1;

	   graphics_status=Graphics_drawLine(x1,y1,x3,y3, colour);
	   if (graphics_status != Graphics_SUCCESS ) return graphics_status;

	   graphics_status= Graphics_drawLine(x3,y3,x2,y2, colour);
	   if (graphics_status != Graphics_SUCCESS ) return graphics_status;

	   graphics_status=Graphics_drawLine(x2,y2,x4,y4, colour);
	   if (graphics_status != Graphics_SUCCESS ) return graphics_status;

	   graphics_status=Graphics_drawLine(x4,y4,x1,y1, colour);
	   if (graphics_status != Graphics_SUCCESS ) return graphics_status;

	   if(noFill ) return Graphics_SUCCESS;

	   if(!noFill)  do {

		                                     //while(x1!=x2 && y1 != y2
		 x1++;
		 y1++;
		 x2--;
		 y2--;

		 Graphics_drawBox(x1,y1,x2,y2,fillColour,1,fillColour);
		 if(x1==x2 || y1==y2) break;
	 } while(x1!=x2);



x1=0,x2=0,y1=0,y2=0;
 return Graphics_SUCCESS;

}

signed int Graphics_drawCircle(unsigned int xc,unsigned int yc,unsigned int r,unsigned short colour,bool noFill,unsigned short fillColour){

	signed int graphics_status=0;





	 int p,q;
	 int x,y,d;
	 if(xc > LT24_WIDTH_limit || (xc+r) > LT24_WIDTH_limit || yc > LT24_HEIGHT_limit || (yc+r) > LT24_HEIGHT_limit )
	 		 // if any of centre coordinates is beyond the limit of the lcd  or the centre plus radius is greater than limits
	 		//, return error of invalid size to prevent the program from iterating through non existent pixels
	 			{ graphics_status=Graphics_INVALIDSIZE; }

	 			if (graphics_status != Graphics_SUCCESS ) return graphics_status;
	 p=0;
	 q=r;
	x=xc;
	y=yc;
	d=3-(2*r);
	graphics_status=eight_octant_draw(colour,x,y,p,q);
	if (graphics_status != Graphics_SUCCESS ) return graphics_status;
	while(p<=q) {
		p++;
		if(d<0) {d=d+4*p+6;

		}
		else {
			q=q-1;
			d=d+4*(p-q)+10;
		}
		graphics_status=eight_octant_draw(colour,x,y,p,q);
		if (graphics_status != Graphics_SUCCESS ) return graphics_status;
	}
    r=r-1;
if(noFill ) return Graphics_SUCCESS;

if(!noFill) while(r>=1) {
	r--;
	graphics_status=Graphics_drawCircle(xc,yc,r,fillColour,1,fillColour);
	if (graphics_status != Graphics_SUCCESS ) return graphics_status;

}
return Graphics_SUCCESS;

}


signed int eight_octant_draw(unsigned short colour,int x ,int y,int p,int q){


	signed int graphics_status=0;


	graphics_status= LT24_drawPixel(colour,x+p,y+q);  //1st octant
	if (graphics_status != Graphics_SUCCESS ) return graphics_status;


	graphics_status= LT24_drawPixel(colour,x-p,y+q);
	if (graphics_status != Graphics_SUCCESS ) return graphics_status;


	graphics_status= LT24_drawPixel(colour,x+p,y-q);
	if (graphics_status != Graphics_SUCCESS ) return graphics_status;


	graphics_status= LT24_drawPixel(colour,x-p,y-q);
	if (graphics_status != Graphics_SUCCESS ) return graphics_status;


	graphics_status= LT24_drawPixel(colour,x+q,y+p);
	if (graphics_status != Graphics_SUCCESS ) return graphics_status;


	graphics_status= LT24_drawPixel(colour,x-q,y+p);
	if (graphics_status != Graphics_SUCCESS ) return graphics_status;


	graphics_status= LT24_drawPixel(colour,x+q,y-p);
	if (graphics_status != Graphics_SUCCESS ) return graphics_status;


	graphics_status= LT24_drawPixel(colour,x-q,y-p);
	if (graphics_status != Graphics_SUCCESS ) return graphics_status;


	return Graphics_SUCCESS;


}

